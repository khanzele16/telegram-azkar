import dotenv from "dotenv";
import Day from "../database/models/Day";
import User from "../database/models/User";
import Azkar from "../database/models/Azkar";
import timezone from "dayjs/plugin/timezone";
import { Api, InlineKeyboard } from "grammy";
import { StreakService } from "../services/StreakService";
import {
  cancelAzkarNotification,
  scheduleAzkarNotify,
} from "../cron/prayerTimesCron";
import { Types } from "mongoose";
import { MyContext } from "../types";
import { IAzkar } from "../types/models";
import dayjs from "dayjs";
import { openAzkar } from "../shared/keyboards";
import { prayerToType, STATUS } from "../config";

dotenv.config({ path: "src/.env" });

dayjs.extend(timezone);

const api = new Api(process.env.BOT_TOKEN as string);

export const sliderStates = new Map<
  string,
  {
    index: number;
    date: string;
    userId: Types.ObjectId;
    chatId: number;
    type: "morning" | "evening";
    azkar: IAzkar[];
  }
>();

export async function sendAzkarNotify(
  telegramId: number,
  prayer: "Fajr" | "Asr",
  date: string,
  utcTime?: string,
  chatId?: number
): Promise<void> {
  const targetChatId = chatId ?? telegramId;
  const user = await User.findOne({ telegramId });

  if (!user) return;
  const type = prayerToType(prayer);
  const existingDay = await Day.findOne({ userId: user._id, date, type });

  if (
    existingDay &&
    (existingDay.status === "read" || existingDay.status === "skipped")
  ) {
    console.log(
      `–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}, —Å—Ç–∞—Ç—É—Å: ${existingDay.status}`
    );
    return;
  }

  const currentReminders = existingDay?.remindersSent || 0;

  if (currentReminders === 1) {
    if (existingDay?.messageId) {
      await api.deleteMessage(targetChatId, existingDay.messageId);
    }
    const message = await api.sendMessage(
      targetChatId,
      `‚è∞ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å ${
        prayer === "Fajr" ? "—É—Ç—Ä–µ–Ω–Ω–∏–µ" : "–≤–µ—á–µ—Ä–Ω–∏–µ"
      } –∞–∑–∫–∞—Ä—ã! –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ —Å—Ç—Ä–∏–∫–∞.`,
      { reply_markup: openAzkar, parse_mode: "HTML" }
    );
    await Day.findOneAndUpdate(
      { _id: existingDay?._id },
      { $set: { messageId: message.message_id } }
    );
  } else if (currentReminders === 2) {
    if (existingDay?.messageId) {
      await api.deleteMessage(targetChatId, existingDay.messageId);
    }
    const message = await api.sendMessage(
      targetChatId,
      `üïå –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${
        prayer === "Fajr" ? "—É—Ç—Ä–µ–Ω–Ω–∏–µ" : "–≤–µ—á–µ—Ä–Ω–∏–µ"
      } –∞–∑–∫–∞—Ä—ã –∂–¥—É—Ç –≤–∞—à–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è.\n\n–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Å–≤–æ–π —Å—Ç—Ä–∏–∫ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –¥–µ–Ω—å —Å –ø–æ–ª—å–∑–æ–π!`,
      { reply_markup: openAzkar, parse_mode: "HTML" }
    );
    await Day.findOneAndUpdate(
      { _id: existingDay?._id },
      { $set: { messageId: message.message_id } }
    );
  } else if (currentReminders >= 3) {
    const updatedDay = await Day.findOneAndUpdate(
      { userId: user._id, date, type },
      { $set: { status: STATUS.SKIPPED } }
    );
    if (!updatedDay) {
      await api.sendMessage(
        targetChatId,
        `‚ùå –í—Ä–µ–º—è ${
          prayer === "Fajr" ? "—É—Ç—Ä–µ–Ω–Ω–∏—Ö" : "–≤–µ—á–µ—Ä–Ω–∏—Ö"
        } –∞–∑–∫–∞—Ä–æ–≤ –∏—Å—Ç–µ–∫–ª–æ. –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —á—Ç–µ–Ω–∏–µ.`
      );
      return;
    }
    await api.editMessageText(
      targetChatId,
      updatedDay.messageId,
      `‚ùå –í—Ä–µ–º—è ${
        prayer === "Fajr" ? "—É—Ç—Ä–µ–Ω–Ω–∏—Ö" : "–≤–µ—á–µ—Ä–Ω–∏—Ö"
      } –∞–∑–∫–∞—Ä–æ–≤ –∏—Å—Ç–µ–∫–ª–æ. –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —á—Ç–µ–Ω–∏–µ.`,
      { parse_mode: "HTML" }
    );

    return;
  }

  await Day.updateOne(
    { userId: user._id, date, type },
    { $inc: { remindersSent: 1 } }
  );
}

export async function sendAzkarNotification(
  telegramId: number,
  prayer: "Fajr" | "Asr",
  date: string,
  chatId?: number
): Promise<void> {
  const targetChatId = chatId ?? telegramId;
  const user = await User.findOne({ telegramId });
  if (!user) return;

  const type = prayerToType(prayer);

  const existingDay = await Day.findOne({ userId: user._id, date, type });
  if (
    existingDay &&
    (existingDay.status === STATUS.READ ||
      existingDay.status === STATUS.SKIPPED)
  ) {
    return;
  }

  const azkar = await Azkar.find({ category: type }).lean();
  if (!azkar || azkar.length === 0) {
    try {
      await api.sendMessage(targetChatId, "–ù–µ—Ç –∞–∑–∫–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è");
    } catch (err) {
      console.error(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–∑–∫–∞—Ä–æ–≤:",
        err
      );
    }
    return;
  }

  const sliderId = `${telegramId}:${Date.now()}`;
  sliderStates.set(sliderId, {
    index: 0,
    date,
    userId: user._id,
    chatId: targetChatId,
    type,
    azkar,
  });

  let messageId: number | undefined;
  try {
    const msg = await api.sendMessage(
      targetChatId,
      formatAzkarMessage(azkar[0], 1, azkar.length),
      {
        reply_markup: buildSliderKeyboard(sliderId, prayer, date),
        parse_mode: "HTML",
      }
    );
    messageId = msg.message_id as number;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª–∞–π–¥–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", telegramId, err);
  }

  await Day.updateOne(
    { userId: user._id, date, type },
    {
      $set: { ...(messageId ? { messageId } : {}) },
      $setOnInsert: { status: STATUS.PENDING, startedAt: new Date() },
      $inc: { remindersSent: 1 },
    },
    { upsert: true }
  );

  const updatedDay = await Day.findOne({ userId: user._id, date, type });
  if (
    updatedDay &&
    updatedDay.status === STATUS.PENDING &&
    updatedDay.remindersSent === 1
  ) {
    const firstReminderISO = dayjs().add(1, "minutes").utc().toISOString();
    console.log("–ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞:", firstReminderISO);

    await scheduleAzkarNotify(
      user._id.toString(),
      telegramId,
      prayer,
      date,
      firstReminderISO,
      1
    );

    const secondReminderISO = dayjs().add(2, "minutes").utc().toISOString();
    console.log(
      "–ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 8 —á–∞—Å–∞:",
      secondReminderISO
    );

    await scheduleAzkarNotify(
      user._id.toString(),
      telegramId,
      prayer,
      date,
      secondReminderISO,
      2
    );

    const thirdReminderISO = dayjs().add(3, "minutes").utc().toISOString();
    console.log(
      "–ü–ª–∞–Ω–∏—Ä—É–µ–º —Ç—Ä–µ—Ç—å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 9 —á–∞—Å–æ–≤:",
      thirdReminderISO
    );

    await scheduleAzkarNotify(
      user._id.toString(),
      telegramId,
      prayer,
      date,
      thirdReminderISO,
      3
    );
  }
}

async function startAzkarSlider(
  ctx: MyContext,
  userId: Types.ObjectId,
  chatId: number,
  prayer: "Fajr" | "Asr",
  date: string
) {
  const type = prayerToType(prayer);
  const azkar = await Azkar.find({ category: type }).lean();
  if (azkar.length === 0) {
    await ctx.api.sendMessage(chatId, "–ù–µ—Ç –∞–∑–∫–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è");
    return;
  }

  if (!ctx.from) {
    await ctx.api.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞");
    return;
  }

  const sliderId = `${ctx.from.id}:${Date.now()}`;
  sliderStates.set(sliderId, { index: 0, date, userId, chatId, type, azkar });

  const keyboard = buildSliderKeyboard(sliderId, prayer, date);
  await ctx.api.sendMessage(
    chatId,
    formatAzkarMessage(azkar[0], 1, azkar.length),
    { reply_markup: keyboard, parse_mode: "HTML" }
  );
}

export function buildSliderKeyboard(
  sliderId: string,
  prayer: "Fajr" | "Asr" = "Fajr",
  date: string
): InlineKeyboard {
  return new InlineKeyboard()
    .text("‚è™", `slider:${sliderId}:prev`)
    .text("‚è©", `slider:${sliderId}:next`)
    .row()
    .text("‚úÖ –ü—Ä–æ—á–∏—Ç–∞–ª", `azkarnotify:read:${prayer}:${date}`)
    .row()
    .text("‚ùå –°–µ–≥–æ–¥–Ω—è –Ω–µ —á–∏—Ç–∞—é", `azkarnotify:skip:${prayer}:${date}`);
}

export function formatAzkarMessage(
  azkar: IAzkar,
  i: number,
  total: number
): string {
  return `<b>üìñ –ê–∑–∫–∞—Ä ${i}/${total}</b>\n\n<blockquote>${azkar.text}\n\n${azkar.translation}</blockquote>\n\n<b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:</b> ${azkar.transcription}`;
}

export async function handleAzkarNotifyCallback(ctx: MyContext): Promise<void> {
  const data = ctx.callbackQuery?.data;
  if (!data) {
    await ctx.answerCallbackQuery("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
    return;
  }

  const [, action, prayer, date] = data.split(":");
  if (!ctx.from) return;
  const user = await User.findOne({ telegramId: ctx.from.id });
  if (!user) {
    await ctx.answerCallbackQuery("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  const typeLabel = prayer === "Fajr" ? "—É—Ç—Ä–µ–Ω–Ω–∏—Ö" : "–≤–µ—á–µ—Ä–Ω–∏—Ö";
  const dbType = prayerToType(prayer as "Fajr" | "Asr");
  const dayRecord = await Day.findOne({ userId: user._id, date, type: dbType });

  if (action === "skip") {
    await cancelAzkarNotification(
      user._id.toString(),
      prayer as "Fajr" | "Asr",
      date
    );
    await StreakService.markSkipped(user._id, date, dbType);
    if (dayRecord?.messageId && ctx.chat) {
      try {
        await ctx.api.editMessageText(
          ctx.chat.id,
          dayRecord.messageId,
          `‚ùå –í—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —á—Ç–µ–Ω–∏–µ ${typeLabel} –∞–∑–∫–∞—Ä–æ–≤`
        );
      } catch (err) {
        console.log("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ", err);
      }
    }
    await ctx.answerCallbackQuery("–î–µ–Ω—å –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π");
    return;
  }

  if (action === "read") {
    await Day.updateOne(
      { userId: user._id, date, type: dbType },
      { $set: { status: STATUS.READ, startedAt: new Date() } },
      { upsert: true }
    );
    if (dayRecord?.messageId && ctx.chat) {
      try {
        await ctx.api.editMessageText(
          ctx.chat.id,
          dayRecord.messageId,
          "‚úÖ –í—ã –ø—Ä–æ—á–∏—Ç–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è —É—Ç—Ä–µ–Ω–Ω–∏–µ –∞–∑–∫–∞—Ä—ã"
        );
      } catch (err) {
        console.log("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ", err);
      }
    }
    await ctx.answerCallbackQuery("–î–µ–Ω—å –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π");
  }

  await ctx.answerCallbackQuery("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ");
}

export async function handleSliderCallback(ctx: MyContext): Promise<void> {
  const data = ctx.callbackQuery?.data;
  if (!data) {
    await ctx.answerCallbackQuery("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
    return;
  }

  const parts = data.split(":");
  const action = parts.pop();
  const sliderId = parts.slice(1).join(":");
  const state = sliderStates.get(sliderId);

  if (!state) {
    await ctx.answerCallbackQuery("–°–ª–∞–π–¥–µ—Ä —É—Å—Ç–∞—Ä–µ–ª");
    return;
  }

  const total = state.azkar.length;

  if (action === "prev") {
    state.index = Math.max(0, state.index - 1);
    await ctx.answerCallbackQuery("üëà –ü—Ä–µ–¥—ã–¥—É—â–∏–π");
  } else if (action === "next") {
    state.index = Math.min(total - 1, state.index + 1);
    await ctx.answerCallbackQuery("üëâ –°–ª–µ–¥—É—é—â–∏–π");
  } else if (action === "finish") {
    sliderStates.delete(sliderId);
    try {
      await Day.updateOne(
        { userId: state.userId, date: state.date, type: state.type },
        { $set: { status: STATUS.READ, finishedAt: new Date() } }
      );
      await ctx.editMessageText("üéâ –í—ã –ø—Ä–æ—á–∏—Ç–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è –∞–∑–∫–∞—Ä—ã, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!");
    } catch {
      await ctx.answerCallbackQuery("–°–ª–∞–π–¥–µ—Ä —É—Å—Ç–∞—Ä–µ–ª");
      return;
    }
    await ctx.answerCallbackQuery("üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ");
    return;
  }

  const currentAzkar = state.azkar[state.index];
  if (!currentAzkar) {
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
    return;
  }
  const prayer = state.type === "morning" ? "Fajr" : "Asr";
  const kb = buildSliderKeyboard(sliderId, prayer, state.date);
  const messageText = formatAzkarMessage(currentAzkar, state.index + 1, total);

  try {
    await ctx.editMessageText(messageText, {
      reply_markup: kb,
      parse_mode: "HTML",
    });
  } catch {
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è");
  }
}
