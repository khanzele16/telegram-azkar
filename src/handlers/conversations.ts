import User from "../database/models/User";
import Day from "../database/models/Day";
import timezone from "dayjs/plugin/timezone";
import utc from "dayjs/plugin/utc";
import dayjs from "dayjs";
import {
  locationKeyboard,
  MailingKeyboard,
  startKeyboard,
  toAdminKeyboard,
} from "../shared/keyboards";
import { getPrayTime } from "../shared/requests";
import { IPrayTime, MyConversation, MyConversationContext } from "../types";
import { updatePrayerTimesAndSchedule } from "../cron/prayerTimesCron";
import { menu } from "./commands";
import { menuButtons } from "./menu";

dayjs.extend(utc);
dayjs.extend(timezone);
dayjs.locale("ru");

export const startConversation = async (
  conversation: MyConversation,
  ctx: MyConversationContext
): Promise<void> => {
  const ctx_message = await ctx.reply(
    "<b>–ê—Å—Å–∞–ª—è–º—É –ê–ª–µ–π–∫—É–º –≤–∞ –†–∞—Ö–º–∞—Ç—É–ª–ª–∞—Ö–∏ –≤–∞ –ë–∞—Ä–∞–∫–∞—Ç—Éh!</b>\n\n" +
      "–ú–∏—Ä, –º–∏–ª–æ—Å—Ç—å –∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –ê–ª–ª–∞—Ö–∞ –¥–∞ –±—É–¥—É—Ç —Å –≤–∞–º–∏.\n" +
      "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å –∞–∑–∫–∞—Ä–∞–º–∏ üåø\n\n" +
      "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ —É—Ç—Ä–µ–Ω–Ω–∏–µ –∏ –≤–µ—á–µ—Ä–Ω–∏–µ –∞–∑–∫–∞—Ä—ã, –¥—É–∞ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º, –∞–∑–∫–∞—Ä—ã –ø–æ—Å–ª–µ –Ω–∞–º–∞–∑–∞, " +
      "–∞ —Ç–∞–∫–∂–µ –ø–æ–ª–µ–∑–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ç–∞—Å–±–∏—Ö.\n\n" +
      "–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.",
    { parse_mode: "HTML", reply_markup: startKeyboard }
  );

  const { callbackQuery } = await conversation.waitFor("callback_query");
  if (callbackQuery.data === "next:location") {
    await ctx.api.answerCallbackQuery(callbackQuery.id, {
      text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞",
    });
    await ctx.api.deleteMessage(ctx_message.chat.id, ctx_message.message_id);
    await locationConversation(conversation, ctx);
  }
};

export const locationConversation = async (
  conversation: MyConversation,
  ctx: MyConversationContext
): Promise<void> => {
  await ctx.reply(
    "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞:</b>\n\n" +
      "üèù –ß—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É—Ç—Ä–µ–Ω–Ω–∏–µ –∏ –≤–µ—á–µ—Ä–Ω–∏–µ –∞–∑–∫–∞—Ä—ã, " +
      "–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Å—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–∞.",
    { parse_mode: "HTML", reply_markup: locationKeyboard }
  );

  const { message } = await conversation.waitFor(":location");
  await ctx.reply("üìç", { reply_markup: { remove_keyboard: true } });

  if (!message?.location) {
    await ctx.reply(
      "<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start.",
      { parse_mode: "HTML" }
    );
    return;
  }

  const { latitude, longitude } = message.location;

  try {
    const month = dayjs().month() + 1; // —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü (1-12)
    const prayTimes: IPrayTime[] | null = await getPrayTime(
      latitude.toString(),
      longitude.toString(),
      month
    );

    if (!prayTimes || prayTimes.length === 0) {
      await ctx.reply(
        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
      );
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ timings
    const timingsToAdd = prayTimes.map((pt) => {
      const fajrUTC = dayjs(`${pt.date} ${pt.Fajr}`, "DD-MM-YYYY HH:mm")
        .utc()
        .toISOString();
      const maghribUTC = dayjs(`${pt.date} ${pt.Maghrib}`, "DD-MM-YYYY HH:mm")
        .utc()
        .toISOString();

      return {
        date: pt.date,
        FajrUTC: fajrUTC,
        MaghribUTC: maghribUTC,
      };
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ User (–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –º–∞—Å—Å–∏–≤ timings)
    const user = await User.findOneAndUpdate(
      { telegramId: ctx.from?.id },
      {
        $set: {
          "location.latitude": latitude.toString(),
          "location.longitude": longitude.toString(),
          timings: timingsToAdd,
        },
      },
      { upsert: true, new: true }
    );

    // –°–æ–∑–¥–∞–µ–º Day –¥–æ–∫—É–º–µ–Ω—Ç—ã (–µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç)
    for (const timing of timingsToAdd) {
      const existingDay = await Day.findOne({
        userId: user!._id,
        date: timing.date,
      });

      if (!existingDay) {
        await Day.create([
          {
            userId: user!._id,
            date: timing.date,
            type: "morning",
            utcTime: timing.FajrUTC,
            status: "pending",
          },
          {
            userId: user!._id,
            date: timing.date,
            type: "evening",
            utcTime: timing.MaghribUTC,
            status: "pending",
          },
        ]);
      }
    }

    // –ë–µ—Ä–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞–º–∞–∑–∞
    const today = dayjs().format("DD-MM-YYYY");
    const todayPrayTime =
      prayTimes.find((p) => p.date === today) || prayTimes[0];

    await ctx.reply(
      `<b>üåû –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –º–µ—Å—è—Ü –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã</b>\n\n` +
        `<b>–°–µ–≥–æ–¥–Ω—è (${dayjs().format("D MMMM YYYY")})</b>:\n` +
        `üåÖ –§–∞–¥–∂—Ä ‚Äî ${todayPrayTime.Fajr}\n` +
        `üåÉ –ú–∞–≥—Ä–∏–± ‚Äî ${todayPrayTime.Maghrib}\n\n` +
        "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n" +
        "üè† –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> —Å –ø–æ–º–æ—â—å—é /menu.",
      { parse_mode: "HTML" }
    );
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ locationConversation:", err);
    await ctx.reply(
      "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    );
  }
};

export async function broadcastConversation(
  conversation: MyConversation,
  ctx: MyConversationContext
) {
  await ctx.reply("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:");
  const { message } = await conversation.waitFor(":text");
  const text = message?.text;
  if (!text) {
    await ctx.reply("‚ùå –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç");
    return await broadcastConversation(conversation, ctx);
  }

  await ctx.reply("üñº –ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):");
  const { message: imageMessage } = await conversation.waitFor("message");

  let photo: string | null = null;
  if (imageMessage?.photo) {
    photo = imageMessage.photo[imageMessage.photo.length - 1].file_id;
  }
  try {
    if (photo) {
      await ctx.replyWithPhoto(photo, {
        caption: `<b>üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n${text}\n\n–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?`,
        parse_mode: "HTML",
        reply_markup: MailingKeyboard,
      });
    } else {
      await ctx.reply(
        `<b>üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n${text}\n\n–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?`,
        { reply_markup: MailingKeyboard, parse_mode: "HTML" }
      );
    }
  } catch (err) {
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏");
    console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: ", err);
  }

  const { callbackQuery } = await conversation.waitFor("callback_query");

  if (callbackQuery?.data === "mailing:cancel") {
    await ctx.api.answerCallbackQuery(callbackQuery.id, {
      text: "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
    });
    await ctx.reply("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
    return;
  } else if (callbackQuery?.data === "mailing:yes") {
    await ctx.api.answerCallbackQuery(callbackQuery.id, {
      text: "üì§ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...",
    });
    await ctx.reply("üì§ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...");
  }

  const users = await User.find({
    blocked: false,
  });

  let success = 0;
  for (const user of users) {
    try {
      if (photo) {
        await ctx.api.sendPhoto(user.telegramId, photo, {
          parse_mode: "HTML",
          caption: text,
        });
      } else {
        await ctx.api.sendMessage(user.telegramId, text, {
          parse_mode: "HTML",
        });
      }
      success++;
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ${user.telegramId}:`, err);
    }
  }

  await ctx.reply(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${success}`);
}
