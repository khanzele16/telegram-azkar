import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import User from "../database/models/User";
import { IPrayTime, MyContext, MyConversationContext } from "../types";
import { StreakService } from "../services/StreakService";
import { CalendarService } from "../services/CalendarService";
import { generateCalendarMarkup } from "../shared/calendarMarkup";
import { getPrayTime } from "../shared/requests";
import { register } from "../database/controllers/auth";
import { start } from "./commands";

dayjs.extend(utc);

export async function statsHandler(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.from?.id) {
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    const user = await User.findOne({ telegramId: ctx.from.id });
    if (!user) {
      await ctx.reply(
        "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
      );
      return;
    }
    
    const stats = await StreakService.getProfileStats(user._id);
    const statsMessage = formatProfileStats(stats);
    
    const now = dayjs.utc();
    const currentYear = now.year();
    const currentMonth = now.month() + 1;
    const calendar = await CalendarService.getMonthCalendar(
      user._id,
      currentYear,
      currentMonth
    );

    const keyboard = generateCalendarMarkup(
      calendar,
      currentYear,
      currentMonth
    );

    await ctx.reply(statsMessage, {
      reply_markup: keyboard,
      parse_mode: "HTML",
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ stats:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
  }
}

export async function handleCalendarNavigation(
  ctx: MyContext,
  year: number,
  month: number
): Promise<void> {
  try {
    if (!ctx.from?.id) {
      await ctx.answerCallbackQuery(
        "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
      );
      return;
    }

    const user = await User.findOne({ telegramId: ctx.from.id });
    if (!user) {
      await ctx.answerCallbackQuery("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    const calendar = await CalendarService.getMonthCalendar(
      user._id,
      year,
      month
    );
    const stats = await StreakService.getProfileStats(user._id);
    const statsMessage = formatProfileStats(stats);
    const keyboard = generateCalendarMarkup(calendar, year, month);

    await ctx.editMessageText(statsMessage, {
      reply_markup: keyboard,
      parse_mode: "HTML",
    });

    await ctx.answerCallbackQuery(`üìÖ ${getMonthName(month)} ${year}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ handleCalendarNavigation:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è");
  }
}

function formatProfileStats(
  stats: Awaited<ReturnType<typeof StreakService.getProfileStats>>
): string {
  return `üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n
üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ: <b>${stats.morningRead}</b> –¥–Ω–µ–π (–ø—Ä–æ–ø—É—â–µ–Ω–æ: ${
    stats.morningSkipped
  })
üåá –í–µ—á–µ—Ä–Ω–∏–µ: <b>${stats.eveningRead}</b> –¥–Ω–µ–π (–ø—Ä–æ–ø—É—â–µ–Ω–æ: ${
    stats.eveningSkipped
  })
üî• –°—Ç—Ä–∏–∫: <b>${stats.streak}</b> –¥–Ω–µ–π
${stats.lastReadAt ? "üìñ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —á—Ç–µ–Ω–∏–µ: " + stats.lastReadAt : ""}`;
}

function getMonthName(month: number): string {
  const months = [
    "–Ø–Ω–≤–∞—Ä—å",
    "–§–µ–≤—Ä–∞–ª—å",
    "–ú–∞—Ä—Ç",
    "–ê–ø—Ä–µ–ª—å",
    "–ú–∞–π",
    "–ò—é–Ω—å",
    "–ò—é–ª—å",
    "–ê–≤–≥—É—Å—Ç",
    "–°–µ–Ω—Ç—è–±—Ä—å",
    "–û–∫—Ç—è–±—Ä—å",
    "–ù–æ—è–±—Ä—å",
    "–î–µ–∫–∞–±—Ä—å",
  ];
  return months[month - 1];
}

export async function profileHandler(ctx: MyContext): Promise<void> {
  try {
    if (!ctx.from?.id) {
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    const user = await User.findOne({ telegramId: ctx.from.id });
    if (!user) {
      await ctx.reply(
        "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
      );
      return;
    }

    const isRegistered: boolean = await register(ctx);
    if (
      !isRegistered ||
      !user.location?.latitude ||
      !user.location?.longitude
    ) {
      await start(ctx);
      return;
    }

    const stats = await StreakService.getProfileStats(user._id);

    const today = dayjs().format("DD-MM-YYYY");
    const prayTimes: IPrayTime[] | null = await getPrayTime(
      user.location.latitude.toString(),
      user.location.longitude.toString(),
      dayjs().month() + 1
    );

    const todayPrayTime = prayTimes?.find((pt) => pt.date === today);

    await ctx.reply(
      `<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å ‚Äî ${user.username || "–í–∞—à"}</b>\n\nüåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π –Ω–∞–º–∞–∑: ${
        todayPrayTime?.Fajr || "-"
      }\nüåÉ –ü–æ—Å–ª–µ–æ–±–µ–¥–µ–Ω–Ω—ã–π –Ω–∞–º–∞–∑: ${
        todayPrayTime?.Asr || "-"
      }\n\nüåÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ: <b>${stats.morningRead}</b> –¥–Ω–µ–π (–ø—Ä–æ–ø—É—â–µ–Ω–æ: ${
        stats.morningSkipped
      })\nüåá –í–µ—á–µ—Ä–Ω–∏–µ: <b>${stats.eveningRead}</b> –¥–Ω–µ–π (–ø—Ä–æ–ø—É—â–µ–Ω–æ: ${
        stats.eveningSkipped
      })`,
      { parse_mode: "HTML" }
    );
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ profileHandler:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è");
  }
}

export const calendarHandler = async (ctx: MyContext) => {
  try {
    if (!ctx.from?.id || !ctx.callbackQuery?.message) return;

    const user = await User.findOne({ telegramId: ctx.from.id });
    if (!user)
      return ctx.answerCallbackQuery({ text: "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã" });

    const data = ctx.callbackQuery.data;
    let year = dayjs().year();
    let month = dayjs().month() + 1;

    if (data && data.startsWith("calendar:")) {
      const parts = data.split(":");
      if (parts.length === 3) {
        year = Number(parts[1]);
        month = Number(parts[2]);
      }
    }

    const calendar = await CalendarService.getMonthCalendar(
      user._id,
      year,
      month
    );
    const keyboard = generateCalendarMarkup(calendar, year, month);

    await ctx.editMessageReplyMarkup({ reply_markup: keyboard });

    await ctx.answerCallbackQuery();
  } catch (err) {
    console.error("calendarHandler error:", err);
    await ctx.answerCallbackQuery({ text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è" });
  }
};
